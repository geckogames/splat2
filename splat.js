// Generated by CoffeeScript 1.9.3
(function() {
  var ImageItem, Item, Player, Screen, canvas, config, ctx, downness, dt, frame, helpers, keysdown, last, now, render, screen, screens, step, update, x,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  config = {
    fps: 60,
    credits: "By GeckoGames",
    alphaThreshold: 210,
    keys: {
      down: 40,
      left: 37,
      up: 38,
      right: 39
    },
    version: "develop",
    tileSize: 63.5,
    eggo: 20,
    mindown: 30
  };

  helpers = {
    updateCanvasSize: function() {
      canvas.width = window.innerWidth || document.clientWidth || document.body.clientWidth;
      return canvas.height = window.innerHeight || document.clientHeight || document.body.clientHeight;
    },
    toCanvasTerms: function(x, y) {
      var originx, originy;
      originx = canvas.width / 2 - screens[screen].calcOriginX() * config.tileSize;
      originy = canvas.height / 2 - screens[screen].calcOriginY() * config.tileSize;
      return {
        x: originx + x * config.tileSize,
        y: originy + y * config.tileSize
      };
    },
    timestamp: function() {
      var ref;
      return (ref = window.performance.now()) != null ? ref : new Date().getTime();
    },
    getImageAlpha: function(image, x, y) {
      var cvctx;
      cvctx = document.createElement("canvas").getContext("2d");
      cvctx.drawImage(image, 0, 0);
      return cvctx.getImageData(x, y, 1, 1).data[3];
    },
    muted: false,
    toggleMute: function() {
      var i, l, len, results;
      this.muted = !this.muted;
      if (localStorage) {
        localStorage.muted = this.muted;
      }
      results = [];
      for (l = 0, len = screens.length; l < len; l++) {
        i = screens[l];
        if (i.music) {
          results.push(i.music.volume = this.muted ? 0 : 1);
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    keyStatus: function(kid) {
      return keysdown[config.keys[kid] || kid];
    },
    toGameMap: function(multis, things) {
      var a, i, j, k, l, len, len1, len2, m, n, o, result, x;
      result = [];
      for (k = l = 0, len = multis.length; l < len; k = ++l) {
        x = multis[k];
        result.push([]);
        for (i = m = 0, len1 = x.length; m < len1; i = ++m) {
          a = x[i];
          for (j = n = 0, len2 = a.length; n < len2; j = ++n) {
            o = a[j];
            if (things[o]) {
              result[k].push(things[o](j, i));
            }
          }
        }
      }
      return result;
    }
  };

  canvas = document.querySelector('#cvas');

  ctx = canvas.getContext('2d');

  screens = [];

  screen = 0;

  x = null;

  update = function() {
    var i, j, l, len, len1, len2, len3, m, n, o, p, ref, results;
    ref = screens[screen].items;
    for (l = 0, len = ref.length; l < len; l++) {
      j = ref[l];
      for (m = 0, len1 = j.length; m < len1; m++) {
        i = j[m];
        i.update();
      }
    }
    for (n = 0, len2 = keysdown.length; n < len2; n++) {
      i = keysdown[n];
      i = i !== 0 ? 1 : 0;
    }
    results = [];
    for (i = p = 0, len3 = screens.length; p < len3; i = ++p) {
      o = screens[i];
      if (o.music && i !== screen) {
        o.music.pause();
        results.push(o.music.currentTime = 0);
      } else {
        results.push(o.music.play());
      }
    }
    return results;
  };

  render = function() {
    var coords, i, j, l, len, len1, m, ref;
    helpers.updateCanvasSize();
    ctx.textAlign = "center";
    ctx.fillStyle = "#fff";
    ctx.font = "10px sans-serif";
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ref = screens[screen].items;
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      for (m = 0, len1 = i.length; m < len1; m++) {
        j = i[m];
        if (j.image) {
          coords = helpers.toCanvasTerms(j.x, j.y);
          ctx.drawImage(j.image, coords.x, coords.y);
        }
      }
    }
    return ctx.fillText(config.credits + " - v " + config.version, canvas.width / 2, canvas.height - 10);
  };

  now = 0;

  dt = 0;

  last = helpers.timestamp();

  step = 1 / config.fps;

  frame = function() {
    now = helpers.timestamp();
    dt = dt + Math.min(1, (now - last) / 1000);
    while (dt > step) {
      dt = dt - step;
      update();
    }
    render();
    last = now;
    return requestAnimationFrame(frame);
  };

  window.onload = function() {
    if (localStorage && localStorage.muted === "true") {
      helpers.toggleMute();
    }
    document.querySelector("#mute").onclick = function() {
      return helpers.toggleMute();
    };
    return requestAnimationFrame(frame);
  };

  canvas.onmouseup = function(e) {
    var coords, i, j, l, len, ref, results;
    ref = screens[screen].items;
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      j = ref[l];
      results.push((function() {
        var len1, m, results1;
        results1 = [];
        for (m = 0, len1 = j.length; m < len1; m++) {
          i = j[m];
          if (i.click) {
            coords = helpers.toCanvasTerms(i.x, i.y);
            if (helpers.getImageAlpha(i.image, e.clientX - coords.x, e.clientY - coords.y) > config.alphaThreshold) {
              results1.push(i.click());
            } else {
              results1.push(void 0);
            }
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  keysdown = [];

  downness = 0;

  window.onkeydown = function(e) {
    if (!keysdown[e.keyCode]) {
      keysdown[e.keyCode] = 2;
      if (e.keyCode === config.keys.down) {
        downness += 1;
        if (downness >= config.mindown) {
          return canvas.classList.add("flipped");
        }
      } else {
        return downness += downness > 0 ? -1 : 0;
      }
    }
  };

  window.onkeyup = function(e) {
    return keysdown[e.keyCode] = 0;
  };

  Item = (function() {
    function Item(x1, y1) {
      this.x = x1;
      this.y = y1;
      this.update = function() {};
      this.image = new Image;
      this.calcClickZone = function() {
        return {
          top: this.y + this.image.height,
          left: this.x,
          bottom: this.y,
          right: this.x + this.image.width
        };
      };
    }

    return Item;

  })();

  ImageItem = (function(superClass) {
    extend(ImageItem, superClass);

    function ImageItem(x, y, url, clickFunc) {
      if (clickFunc == null) {
        clickFunc = function() {};
      }
      ImageItem.__super__.constructor.call(this, x, y);
      this.image.src = url;
      this.click = clickFunc;
    }

    return ImageItem;

  })(Item);

  Player = (function(superClass) {
    extend(Player, superClass);

    function Player(x, y) {
      Player.__super__.constructor.call(this, x, y);
      this.image.src = "img/player.png";
      this.update = function() {
        console.log(helpers.keyStatus('down'));
        if (helpers.keyStatus('down')) {
          this.y += 0.05;
        }
        if (helpers.keyStatus('up')) {
          this.y -= 0.05;
        }
        if (helpers.keyStatus('left')) {
          this.x -= 0.05;
        }
        if (helpers.keyStatus('right')) {
          return this.x += 0.05;
        }
      };
    }

    return Player;

  })(Item);

  Screen = (function() {
    Screen.prototype.calcOriginX = function() {
      return 0;
    };

    Screen.prototype.calcOriginY = function() {
      return 0;
    };

    function Screen(items, music, additional) {
      var i, o;
      if (additional == null) {
        additional = {};
      }
      this.items = items;
      this.music = new Audio;
      this.music.src = music;
      for (i in additional) {
        o = additional[i];
        this[i] = o;
      }
    }

    return Screen;

  })();

  screens[0] = new Screen([
    [
      new ImageItem(-3.546875, -3.5, "img/logo-shaded.png", function() {
        screens[0].eggoCount++;
        if (screens[0].eggoCount === config.eggo) {
          return document.body.classList.add("eggomylego");
        }
      }), new ImageItem(-1.5625, -1.5, "img/playbutton.png", function() {
        return screen = 1;
      }), new ImageItem(-1.5625, 0, "img/creditsbutton.png", function() {})
    ]
  ], "aud/carnivalloader.mp3", {
    eggoCount: 0
  });

  screens[1] = new Screen(helpers.toGameMap([[[0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]], [[x, x, x, 2]]], [
    (function(x, y) {
      return new ImageItem(x, y, "img/grass.png");
    }), (function(x, y) {
      return new ImageItem(x, y, "img/grass2.png");
    }), (function(x, y) {
      return new Player(x, y);
    })
  ]), "aud/Smoke Machine 2.wav", {
    calcOriginX: function() {
      return 2;
    },
    calcOriginY: function() {
      return 2.5;
    }
  });

}).call(this);
